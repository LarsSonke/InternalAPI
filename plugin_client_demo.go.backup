package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

func main() {
	fmt.Println("🏨 Hotel Plugin Hub - API Client Demo")
	fmt.Println("=====================================")
	
	client := &http.Client{Timeout: 10 * time.Second}
	baseURL := "http://localhost:8080"
	pluginKey := "hotel-plugin-key-12345"
	
	// Demo 1: Plugin Authentication
	fmt.Println("\n🔌 1. PLUGIN AUTHENTICATION TEST")
	req, _ := http.NewRequest("GET", baseURL+"/api/v1/albums", nil)
	req.Header.Set("X-Plugin-API-Key", pluginKey)
	req.Header.Set("X-Plugin-Name", "Booking-System-Plugin")
	req.Header.Set("Origin", "http://localhost:3000") // Simulate web frontend
	
	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("❌ Error: %v\n", err)
		return
	}
	defer resp.Body.Close()
	
	body, _ := io.ReadAll(resp.Body)
	fmt.Printf("Status: %d\n", resp.StatusCode)
	fmt.Printf("Request ID: %s\n", resp.Header.Get("X-Request-ID"))
	fmt.Printf("CORS Headers: %s\n", resp.Header.Get("Access-Control-Allow-Origin"))
	fmt.Printf("Response: %s\n", string(body)[:min(200, len(body))])
	
	// Demo 2: Create Hotel Data via Plugin
	fmt.Println("\n📝 2. CREATE DATA VIA PLUGIN")
	albumData := map[string]interface{}{
		"id":     "room-101-checkin",
		"title":  "Room 101 Check-in",
		"artist": "Guest John Doe",
		"price":  150.00,
	}
	
	jsonData, _ := json.Marshal(albumData)
	req2, _ := http.NewRequest("POST", baseURL+"/api/v1/albums", bytes.NewBuffer(jsonData))
	req2.Header.Set("X-Plugin-API-Key", pluginKey)
	req2.Header.Set("X-Plugin-Name", "Room-Management-Plugin")
	req2.Header.Set("Content-Type", "application/json")
	req2.Header.Set("Origin", "http://localhost:3000")
	
	resp2, err := client.Do(req2)
	if err != nil {
		fmt.Printf("❌ Error: %v\n", err)
		return
	}
	defer resp2.Body.Close()
	
	body2, _ := io.ReadAll(resp2.Body)
	fmt.Printf("Status: %d\n", resp2.StatusCode)
	fmt.Printf("Request ID: %s\n", resp2.Header.Get("X-Request-ID"))
	fmt.Printf("Response: %s\n", string(body2)[:min(200, len(body2))])
	
	// Demo 3: Try Admin Endpoint (should fail with plugin key)
	fmt.Println("\n🔐 3. ADMIN ENDPOINT ACCESS (Plugin Key - Should Fail)")
	req3, _ := http.NewRequest("GET", baseURL+"/admin/system-status", nil)
	req3.Header.Set("X-Plugin-API-Key", pluginKey)
	
	resp3, err := client.Do(req3)
	if err != nil {
		fmt.Printf("❌ Error: %v\n", err)
		return
	}
	defer resp3.Body.Close()
	
	body3, _ := io.ReadAll(resp3.Body)
	fmt.Printf("Status: %d (Expected: 401)\n", resp3.StatusCode)
	fmt.Printf("Response: %s\n", string(body3)[:min(200, len(body3))])
	
	// Demo 4: Test CORS Preflight
	fmt.Println("\n🌐 4. CORS PREFLIGHT TEST")
	req4, _ := http.NewRequest("OPTIONS", baseURL+"/api/v1/albums", nil)
	req4.Header.Set("Origin", "http://localhost:3000")
	req4.Header.Set("Access-Control-Request-Method", "POST")
	req4.Header.Set("Access-Control-Request-Headers", "Content-Type,X-Plugin-API-Key")
	
	resp4, err := client.Do(req4)
	if err != nil {
		fmt.Printf("❌ Error: %v\n", err)
		return
	}
	defer resp4.Body.Close()
	
	fmt.Printf("Status: %d\n", resp4.StatusCode)
	fmt.Printf("Allow-Origin: %s\n", resp4.Header.Get("Access-Control-Allow-Origin"))
	fmt.Printf("Allow-Methods: %s\n", resp4.Header.Get("Access-Control-Allow-Methods"))
	fmt.Printf("Allow-Headers: %s\n", resp4.Header.Get("Access-Control-Allow-Headers"))
	
	fmt.Println("\n🎉 Plugin Demo Complete!")
	fmt.Println("\n📋 Summary:")
	fmt.Println("✅ Plugin authentication working")
	fmt.Println("✅ CORS headers properly configured")
	fmt.Println("✅ Request correlation IDs included")
	fmt.Println("✅ Admin endpoints protected from plugins")
	fmt.Println("✅ Ready for plugin hub integration!")
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}